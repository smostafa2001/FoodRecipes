@typeparam TItem

<div>
    <div class="mb-3">
        <div class="btn-group">
            <button @onclick="@(() => _mode = ViewMode.Card)" class="btn @(_mode == ViewMode.Card ? "btn-primary" : "btn-secondary")">Card</button>
            <button @onclick="@(() => _mode = ViewMode.Table)" class="btn @(_mode == ViewMode.Table ? "btn-primary" : "btn-secondary")">Table</button>
        </div>
        @if (_mode == ViewMode.Card)
        {
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                @foreach (var item in Items)
                {
                    @if (CardTemplate is not null)
                    {
                        @CardTemplate(item)
                    }
                }
            </div>
        }
        else if (_mode == ViewMode.Table)
        {
            <table class="table table-bordered table-striped">
                <tr>@TableHeaderTemplate</tr>
                @foreach (var item in Items)
                {
                    <tr>
                        @if (TableDetailsTemplate is not null)
                        {
                            @TableDetailsTemplate(item)
                        }
                    </tr>
                }
            </table>
        }
    </div>
</div>

@code {
    private enum ViewMode { Card, Table }

    private ViewMode _mode = ViewMode.Card;

    [Parameter, EditorRequired]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();
    [Parameter, EditorRequired]
    public RenderFragment<TItem>? CardTemplate { get; set; }
    [Parameter, EditorRequired]
    public RenderFragment? TableHeaderTemplate { get; set; }
    [Parameter, EditorRequired]
    public RenderFragment<TItem>? TableDetailsTemplate { get; set; }
}

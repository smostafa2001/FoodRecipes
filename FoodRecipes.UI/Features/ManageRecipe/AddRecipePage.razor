@page "/AddRecipe"
@inject HttpClient _httpClient;

<PageTitle>Add Recipe</PageTitle>

<h3>Add a recipe</h3>

@if (_success)
{
    <div class="alert alert-success">
        Recipe saved with id: @_id
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">
        @_errorMessage
    </div>
}

<EditForm EditContext="_editContext" OnValidSubmit="SubmitFormAsync">
    <FluentValidationValidator></FluentValidationValidator>
    <FormSection Title="Basic Data" Description="Lorem ipsum dolor sit amet, consectetur adipiscing Lorem ipsum dolor sit amet, consectetur adipiscing Lorem ipsum dolor sit amet, consectetur adipiscing">
        <FormFieldSet>
            <label for="recipeName" class="fw-bold text-secondary">Name</label>
            <InputText @bind-Value="_recipe.Name" class="form-control" id="recipeName"></InputText>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.Name)" /></div>
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipeDescription" class="fw-bold text-secondary">Description</label>
            <InputTextArea rows="6" @bind-Value="_recipe.Description" class="form-control" id="recipeDescription"></InputTextArea>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.Description)" /></div>
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipeOriginality" class="fw-bold text-secondary">Originality</label>
            <InputText @bind-Value="_recipe.Originality" class="form-control" id="recipeOriginality"></InputText>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.Originality)" /></div>
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipePrice" class="fw-bold text-secondary">Price</label>
            <InputNumber @bind-Value="_recipe.Price" class="form-control" id="recipePrice"></InputNumber>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.Price)" /></div>
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipeTimeInMinutes" class="fw-bold text-secondary">Time In Minutes</label>
            @*<InputNumber @bind-Value="_recipe.TimeInMinutes" class="form-control" id="recipeTimeInMinutes"></InputNumber>*@
            <InputTime @bind-Value="_recipe.TimeInMinutes" id="recipeTimeInMinutes"></InputTime>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.TimeInMinutes)" /></div>
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipeImage" class="fw-bold text-secondary">Recipe Image</label>
            <InputFile id="recipeImage" class="form-control" accept=".jpg, .png, .jpeg" OnChange="LoadRecipeFile"></InputFile>
            <div class="mt-3"><ValidationMessage For="@(()=>_recipe.Price)" /></div>
        </FormFieldSet>
    </FormSection>
    <FormSection Title="Ingredient Data" Description="Lorem ipsum dolor sit amet, consectetur adipiscing Lorem ipsum dolor sit amet, consectetur adipiscing Lorem ipsum dolor sit amet, consectetur adipiscing">
        @foreach (var (Ingredient, i) in _recipe.Ingredients.Select((Ingredient, i) => (Ingredient, i)))
        {
            <FormFieldSet>
                <label for="@("IngredientName"+i)" class="fw-bold text-secondary">Ingredient Name</label>
                <div class="input-group">
                    <InputText @bind-Value="Ingredient.Name" class="form-control" id="@("IngredientName"+i)"></InputText>
                    <button type="button" class="btn btn-outline-danger" @onclick="@(()=>_recipe.Ingredients.Remove(Ingredient))">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                        </svg>
                        Remove
                    </button>
                </div>
                <div class="mt-3"><ValidationMessage For="@(()=>Ingredient.Name)" /></div>
            </FormFieldSet>
        }
        <div class="mb-3"><ValidationMessage For="@(()=>_recipe.Ingredients)" /></div>
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-outline-success" @onclick="@(()=>_recipe.Ingredients.Add(new IngredientDTO()))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                    </svg>
                    Add new Ingredient
                </button>
            </div>
        </div>
    </FormSection>
    <div class="my-4">
        <div class="row">
            <div class="col-8 offset-4">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _recipe = new())">Reset</button>
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private RecipeDTO _recipe = new();
    private bool _success;
    private string _errorMessage = string.Empty;
    private int _id;
    private EditContext? _editContext;
    private IBrowserFile? _recipeFile;

    private void LoadRecipeFile(InputFileChangeEventArgs args) => _recipeFile = args.File;

    protected override void OnInitialized()
    {
        _editContext = new(_recipe);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider());
    }

    public async Task SubmitFormAsync()
    {
        var response = await _httpClient.PostAsJsonAsync("/api/Recipes", _recipe);
        if (response.IsSuccessStatusCode)
        {
            _recipe = new();
            _errorMessage = string.Empty;
            _id = int.Parse(await response.Content.ReadAsStringAsync());
            _success = true;
            if (_recipeFile is not null)
            {
                var fileContent = _recipeFile.OpenReadStream(_recipeFile.Size);
                using var content = new MultipartFormDataContent();
                content.Add(new StreamContent(fileContent), "image", _recipeFile.Name);
                var imageResponse = await _httpClient.PostAsync($"/api/Recipes/{_id}", content);
                if (imageResponse.IsSuccessStatusCode)
                {
                    _recipeFile = null;
                    StateHasChanged();
                }
            }
        }
        else
        {
            _errorMessage = "There was a problem for saving recipe";
            _success = false;
            _id = -1;
        }
    }
}
